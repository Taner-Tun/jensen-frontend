{"mappings":"AAAA,KAAK,CAAC,aAAa,GAAG,CAAC;IACnB,OAAO,GAAG,IAAG,GAAK,CAAC;QACf,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAC,MAAM,CAC9B,KAAK,CAAC,CAAG,IACT,GAAG,EAAC,MAAM,GAAI,MAAM,CAAC,KAAK,CAAC,CAAG;UAC9B,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,KAAK,KAAO,CAAC;mBAAG,GAAG;iBAAG,GAAG,CAAC,IAAI,KAAK,KAAK;YAAA,CAAC;UAAG,CAAC;QAAA,CAAC;QACpE,MAAM,CAAC,OAAO,CAAC,IAAG;IACpB,CAAC;IACD,OAAO,GAAG,GAAG,EAAE,KAAK,GAAK,CAAC;QACtB,QAAQ,CAAC,MAAM,MAAM,GAAG,CAAC,CAAC,EAAE,KAAK;IACrC,CAAC;AACL,CAAC;AAED,KAAK,CAAC,WAAW,GAAG,aAAa;AACjC,KAAK,CAAC,mBAAmB,GAAG,CAAa;AAEzC,KAAK,CAAC,eAAe,QAAU,WAAW,CAAC,OAAO,CAAC,mBAAmB;;AACtE,KAAK,CAAC,aAAa,OAAS,WAAW,CAAC,OAAO,CAAC,mBAAmB,EAAE,IAAI;;AAEzE,MAAM,CAAC,MAAM,OAAS,CAAC;IACnB,KAAK,CAAC,YAAY,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAe;IAC5D,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAQ;IAElD,KAAK,CAAC,QAAQ,IAAG,KAAK,GAAI,CAAC;QACvB,aAAa,CAAC,WAAW;QACzB,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,CAAQ;IACvC,CAAC;IACG,SAAS,CAAC,gBAAgB,CAAC,CAAO,QAAE,QAAQ;IAEjD,EAAE,EAAC,eAAe,CAAC,WAAW,GAC7B,UAAU,KAAO,CAAC;QAEf,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,CAAQ;IACzC,CAAC,EAAC,IAAI;AAGV,CAAC;AAQD,QAAQ,CAAC,gBAAgB,CAAC,CAAQ,UAAI,KAAK,GAAG,CAAC;IAC3C,OAAO,CAAC,GAAG,CAAC,CAAY;IACxB,GAAG,CAAC,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAM,OAAE,KAAK;IAChD,GAAG,CAAC,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAU,WAAE,KAAK;IAExD,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,cAAc;IAChC,OAAO,CAAC,IAAI,CAAC,CAAM,OAAE,CAAiC;IACtD,EAA0C,AAA1C,wCAA0C;IAC1C,OAAO,CAAC,GAAG,CAAC,CAAW;IAEvB,OAAO,CAAC,gBAAgB,CAAC,CAAc,eAAE,CAAmC;IAC5E,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,UAAU,EAAE,QAAQ;IAE9C,KAAK,CAAC,cAAc;AACxB,CAAC","sources":["app.js"],"sourcesContent":["const cookieStorage = {\r\n    getItem: (key) => {\r\n        const cookies = document.cookie\r\n        .split(';')\r\n        .map(cookie => cookie.split('='))\r\n        .reduce((acc, [key, value]) => ({...acc, [key.trim()]: value}), {});\r\n      return cookies[key];\r\n    },\r\n    setItem: (key, value) => {\r\n        document.cookie = `${key}=${value}`;\r\n    },\r\n};\r\n\r\nconst storageType = cookieStorage;\r\nconst consentPropertyName = 'jdc_consent';\r\n\r\nconst shouldShowPopup = () => !storageType.getItem(consentPropertyName);\r\nconst saveToStorage = () => storageType.setItem(consentPropertyName, true);\r\n\r\nwindow.onload = () => {  //set up some behaviour\r\n    const consentPopup = document.getElementById('consent-popup');\r\n    const acceptBtn = document.getElementById('accept');\r\n\r\n    const acceptFn = event => {   //accept button clicked\r\n        saveToStorage(storageType);\r\n        consentPopup.classList.add('hidden');\r\n    };\r\n        acceptBtn.addEventListener('click', acceptFn);\r\n        \r\n   if(shouldShowPopup(storageType)) {\r\n    setTimeout(() => {\r\n     \r\n       consentPopup.classList.remove('hidden');\r\n    },2000);\r\n    \r\n  }\r\n};\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n\r\ndocument.addEventListener(\"submit\" , (event)=>{\r\n    console.log(\"Validating\")\r\n    let user = document.getElementById(\"user\").value;\r\n    let password = document.getElementById(\"password\").value;\r\n\r\n    let request = new XMLHttpRequest();\r\n    request.open(\"POST\", \"http://localhost:3000/authorize\");\r\n    //request.send(new FormData(formElement));\r\n    console.log(\"Validated\")\r\n\r\n    request.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n    request.send(`user=${user}&password=${password}`);\r\n\r\n    event.preventDefault()\r\n})"],"names":[],"version":3,"file":"index.7c0ccee6.js.map","sourceRoot":"/__parcel_source_root/"}